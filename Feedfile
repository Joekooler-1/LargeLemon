import pandas as pd
from datetime import datetime

def merge_feed_files(date, output_file):
    """
    Merges data from three files into one, adding a column indicating the source file.

    Parameters:
    date (str): Date in YYYYMMDD format to locate the specific feed files.
    output_file (str): Path to save the merged output file.

    Returns:
    None
    """
    # Define the consistent file paths
    file1 = f"/path/to/folder1/feed_{date}.xls"
    file2 = f"/path/to/folder2/feed_{date}.xls"
    file3 = f"/path/to/folder3/feed_{date}.xls"

    # Read the files into DataFrames with engine='python' for CSV parsing
    try:
        df_toronto = pd.read_csv(file1, engine='python')
        df_sydney = pd.read_csv(file2, engine='python')
        df_london = pd.read_csv(file3, engine='python')
    except FileNotFoundError as e:
        print(f"Error: {e}")
        return
    except pd.errors.ParserError as e:
        print(f"Parsing error in one of the files: {e}")
        return

    # Add a column indicating the source file
    df_toronto['Source File'] = 'TORONTO'
    df_sydney['Source File'] = 'SYDNEY'
    df_london['Source File'] = 'LONDON'

    # Combine the DataFrames
    combined_df = pd.concat([df_toronto, df_sydney, df_london], ignore_index=True)

    # Save the combined DataFrame to a new file
    combined_df.to_csv(output_file, index=False)

    # Print the headers of the merged file
    print("Headers in the merged file:")
    print(combined_df.columns.tolist())

    print(f"Data merged successfully into {output_file}!")

# Example usage
if __name__ == "__main__":
    # Set the date dynamically or hardcode it
    date = datetime.now().strftime('%Y%m%d')  # Replace with '20250101' or similar if needed
    output_file = '/path/to/output_folder/merged_feed.csv'
    merge_feed_files(date, output_file)
